#!/usr/bin/env python3

import json
import os
import socket
import subprocess

HYPRLAND_INSTANCE_SIGNATURE = os.environ['HYPRLAND_INSTANCE_SIGNATURE']
socket_path = f"/tmp/hypr/{HYPRLAND_INSTANCE_SIGNATURE}/.socket2.sock"


def parse_shell_json(command):
    try:
        output = subprocess.check_output(command, shell=True, text=True)
        return json.loads(output)
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return None


def generate_default_workspaces():
    return [
        {
            "id": workspace_id,
            "windows": 0,
            "active": False,
            "hasfullscreen": False
        }
        for workspace_id in range(1, 10)
    ]


def update_workspaces():
    workspaces_data = parse_shell_json("hyprctl workspaces -j")
    monitors_data = parse_shell_json("hyprctl monitors -j")
    client_data = parse_shell_json("hyprctl clients -j")
    result = []

    default_workspaces = generate_default_workspaces()

    for monitor in monitors_data:
        monitor_info = {
            "id": monitor["id"],
            "single": False,
            "workspaces": [],
            "lastwindow": {}
        }

        # Assign workspaces to monitors
        monitor_workspaces = [ws.copy() for ws in default_workspaces if (
            ws["id"] - 1) % 3 == monitor["id"]]

        # Update workspaces with real data
        for workspace in workspaces_data:
            for monitor_workspace in monitor_workspaces:
                if workspace["id"] == monitor_workspace["id"] and workspace["monitor"] == monitor["name"]:
                    monitor_workspace["windows"] = workspace["windows"]
                    monitor_workspace["active"] = workspace["id"] == monitor["activeWorkspace"]["id"]
                    monitor_workspace["hasfullscreen"] = workspace["hasfullscreen"]
                    if monitor_workspace["active"]:
                        monitor_info["activehaswindow"] = workspace["windows"] > 0
                        for client in client_data:
                            if client["address"] == workspace["lastwindow"]:
                                monitor_info["lastwindow"]["fullscreen"] = client["fullscreen"]
                                monitor_info["lastwindow"]["floating"] = client["floating"]
                                monitor_info["lastwindow"]["pinned"] = client["pinned"]
                                break
                    break

        monitor_info["workspaces"] = monitor_workspaces
        result.append(monitor_info)

    output_obj = {
        "monitors": result
    }

    output_str = json.dumps(output_obj).replace('"', '\\"').replace('\\\\"', '\\\\\\"')

    os.system(f"eww update hyprland=\"{output_str}\"")


def main():
    # Print at start
    update_workspaces()

    # Print every time there is an event
    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s:
        s.connect(socket_path)
        sfile = s.makefile(mode='r', buffering=1)
        while True:
            line = sfile.readline().strip()
            if not line:
                break
            update_workspaces()


if __name__ == "__main__":
    main()
