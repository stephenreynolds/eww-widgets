#!/usr/bin/env python3

import json
import os
import sys
from datetime import datetime
import shutil
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("GdkPixbuf", "2.0")
from gi.repository import GdkPixbuf, GLib, Gtk

CACHE_DIR = "/tmp/eww"
HISTORY_PATH = os.path.expandvars("$XDG_CACHE_HOME/eww/notifications.json")
HISTORY_LIMIT = 20


def unwrap(value: dbus.Array
           | dbus.Boolean
           | dbus.Byte
           | dbus.Dictionary
           | dbus.Double
           | dbus.Int16
           | dbus.ByteArray
           | dbus.Int32
           | dbus.Int64
           | dbus.Signature
           | dbus.UInt16
           | dbus.UInt32
           | dbus.UInt64
           | dbus.String) -> str | int | list | tuple | float | dict | bool | bytes:
    if isinstance(value, dbus.ByteArray):
        return "".join([str(byte) for byte in value])
    if isinstance(value, (dbus.Array, list, tuple)):
        return [unwrap(item) for item in value]
    if isinstance(value, (dbus.Dictionary, dict)):
        return dict([(unwrap(x), unwrap(y)) for x, y in value.items()])
    if isinstance(value, (dbus.Signature, dbus.String)):
        return str(value)
    if isinstance(value, dbus.Boolean):
        return bool(value)
    if isinstance(
        value,
        (dbus.Int16, dbus.UInt16, dbus.Int32,
         dbus.UInt32, dbus.Int64, dbus.UInt64),
    ):
        return int(value)
    if isinstance(value, dbus.Byte):
        return bytes([int(value)])
    return value


def get_gtk_icon_path(icon_name: str, size: int = 128) -> str:
    if size < 32:
        return None
    if info := Gtk.IconTheme.get_default().lookup_icon(icon_name, size, 0):
        return info.get_filename()
    return get_gtk_icon_path(icon_name, size - 1)


def save_img_byte(pix, path):
    GdkPixbuf.Pixbuf.new_from_bytes(width=pix[0],
                                    height=pix[1],
                                    has_alpha=pix[3],
                                    data=GLib.Bytes(pix[6]),
                                    colorspace=GdkPixbuf.Colorspace.RGB,
                                    rowstride=pix[2],
                                    bits_per_sample=pix[4]).savev(path, "png")


def handle_app_rules(notification):
    appname = notification["appname"]
    match appname:
        case "Music Player Daemon":
            notification["hints"]["image-path"] = notification["icon"]
            del notification["icon"]
        case "Mailspring":
            notification["icon"] = notification["hints"]["image-path"]
            del notification["hints"]["image-path"]


# DOCS: https://specifications.freedesktop.org/notification-spec/latest/ar01s08.html
def parse_hints(hints_list, appname, id):
    hints = {}

    if "action-icons" in hints_list:
        hints["action-icons"] = hints_list["action-icons"]

    if "category" in hints_list:
        hints["category"] = hints_list["category"]

    if "desktop-entry" in hints_list:
        hints["desktop-entry"] = hints_list["desktop-entry"]

    if "image-path" in hints_list:
        image_path = hints_list["image-path"]
        image_path = image_path.replace("file://", "")
        filename = os.path.basename(image_path)
        new_path = f"{CACHE_DIR}/{filename}"
        shutil.copy(image_path, new_path)
        hints["image-path"] = new_path
    elif "image_path" in hints_list:
        image_path = hints_list["image_path"]
        image_path = image_path.replace("file://", "")
        filename = os.path.basename(image_path)
        new_path = f"{CACHE_DIR}/{filename}"
        shutil.copy(image_path, new_path)
        hints["image-path"] = new_path

    if "image-data" in hints_list:
        hints["image-path"] = f"{CACHE_DIR}/{appname}-{id}.png"
        save_img_byte(hints_list["image-data"], hints["image-path"])
    elif "image_data" in hints_list:
        hints["image-path"] = f"{CACHE_DIR}/{appname}-{id}.png"
        save_img_byte(hints_list["image_data"], hints["image-path"])

    if "sound-file" in hints_list:
        hints["sound-file"] = hints_list["sound-file"]

    if "sound-name" in hints_list:
        hints["sound-name"] = hints_list["sound-name"]

    if "suppress-sound" in hints_list:
        hints["suppress-sound"] = hints_list["suppress-sound"]

    if "transient" in hints_list:
        hints["transient"] = hints_list["transient"]

    if "x" in hints_list:
        hints["x"] = hints_list["x"]

    if "y" in hints_list:
        hints["y"] = hints_list["y"]

    if "urgency" in hints_list:
        match hints_list["urgency"]:
            case b"\x00":
                hints["urgency"] = "low"
            case b"\x01":
                hints["urgency"] = "normal"
            case b"\x02":
                hints["urgency"] = "critical"

    # Non-standard hints
    if "value" in hints_list:
        hints["value"] = hints_list["value"]
    if "sender-pid" in hints_list:
        hints["sender-pid"] = hints_list["sender-pid"]

    return hints


def get_notification_icon(app_icon):
    if app_icon.strip():
        if "/" in app_icon or "." in app_icon:
            icon_path = app_icon
            icon_path = icon_path.replace("file://", "")
            filename = os.path.basename(icon_path)
            new_path = f"{CACHE_DIR}/{filename}"
            shutil.copy(icon_path, new_path)
            return new_path
        return get_gtk_icon_path(app_icon)


def parse_notification(id, app_name, replaces_id, app_icon, summary,
                       body, actions, hints, expire_timeout):
    notification = {
        "id": id,
        "timestamp": datetime.now().strftime("%-l:%M %p"),
        "appname": app_name,
        "replaces-id": replaces_id,
        "icon": get_notification_icon(app_icon),
        "summary": summary,
        "body": GLib.markup_escape_text(body),
        "actions": actions,
        "hints": parse_hints(hints, app_name, id),
        "timeout": expire_timeout
    }

    # Special rules
    handle_app_rules(notification)

    return notification


def print_notifications():
    try:
        with open(HISTORY_PATH, "r") as file:
            output_str = file.read().replace('"', '\\"').replace('\\\\"', '\\\\\\"')
            os.system(f"eww update notifications=\"{output_str}\"")
    except FileNotFoundError:
        os.system("eww update notifications=\"[]\"")


class NotificationServer(dbus.service.Object):
    def __init__(self):
        bus_name = dbus.service.BusName(
            "org.freedesktop.Notifications", bus=dbus.SessionBus())
        dbus.service.Object.__init__(
            self, bus_name, "/org/freedesktop/Notifications")

        self.notifications = []
        self.next_id = 1

        self.load_notifications_from_json()
        print_notifications()

    def load_notifications_from_json(self):
        if not os.path.exists(HISTORY_PATH):
            with open(HISTORY_PATH, "w") as f:
                json.dump([], f)

        with open(HISTORY_PATH, "r") as f:
            try:
                self.notifications = json.load(f)
                if self.notifications:
                    max_id = max(notification["id"]
                                 for group in self.notifications
                                 for notification in group["notifications"])
                    self.next_id = max(max_id + 1, self.next_id)
                else:
                    self.next_id = 1
            except json.JSONDecodeError:
                pass

    def save_notifications_to_json(self):
        with open(HISTORY_PATH, "w") as f:
            json.dump(self.notifications, f)

    def append_notification(self, notification):
        appname = notification['appname']
        found_group = None
        for group in self.notifications:
            if group['appname'] == appname:
                found_group = group
                break

        if found_group:
            found_group['notifications'].insert(0, notification)
            self.notifications.remove(found_group)
            self.notifications.insert(0, found_group)
        else:
            new_group = {'appname': appname, 'notifications': [notification]}
            self.notifications.insert(0, new_group)

        if len(self.notifications) > 20:
            self.notifications.pop()

        for group in self.notifications:
            if len(group['notifications']) > 20:
                group['notifications'].pop()

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='', out_signature='as')
    def GetCapabilities(self):
        return ['body', 'body-hyperlinks', 'body-markup', 'actions',
                'action-icons', 'icon-static', 'persistence', 'sound']

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        name = "JSON Notification Server"
        vendor = "github.com/stephenreynolds"
        version = "git"
        spec_version = "1.2"
        return [name, vendor, version, spec_version]

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{sv}i', out_signature='u')
    def Notify(self, app_name, replaces_id, app_icon, summary, body, actions, hints, expire_timeout):
        id = replaces_id

        if replaces_id == 0:
            while self.next_id in (notification["id"]
                                   for group in self.notifications
                                   for notification in group["notifications"]):
                self.next_id += 1
            if self.next_id >= sys.maxsize:
                self.next_id = replaces_id
            id = self.next_id

        assert id > 0, "Notification ID must be greater than zero."

        args = [unwrap(a) for a in [app_name, replaces_id, app_icon, summary, body, actions, hints, expire_timeout]]

        notification = parse_notification(id, *args)

        self.append_notification(notification)
        self.save_notifications_to_json()
        print_notifications()

        return id

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='u', out_signature='')
    def CloseNotification(self, id):
        for group in self.notifications:
            for i, notification in enumerate(group["notifications"]):
                if notification["id"] == id:
                    if len(group["notifications"]) == 1:
                        self.notifications.remove(group)
                    else:
                        group["notifications"].pop(i)
        self.save_notifications_to_json()
        print_notifications()

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='s', out_signature='')
    def CloseNotificationGroup(self, appname):
        for group in self.notifications:
            if group["appname"] == appname:
                self.notifications.remove(group)

        self.save_notifications_to_json()
        print_notifications()

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='', out_signature='')
    def CloseAllNotifications(self):
        self.notifications.clear()
        self.save_notifications_to_json()
        print_notifications()

    @dbus.service.signal("org.freedesktop.Notifications", signature='uu')
    def NotificationClosed(self, id, reason):
        pass


if __name__ == "__main__":
    DBusGMainLoop(set_as_default=True)

    server = NotificationServer()

    loop = GLib.MainLoop()
    loop.run()
